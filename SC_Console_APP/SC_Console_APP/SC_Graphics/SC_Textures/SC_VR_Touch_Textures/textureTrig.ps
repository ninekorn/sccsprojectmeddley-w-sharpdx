
/////////////////////
////   GLOBALS
//////////////////////
Texture2D shaderTexture;
SamplerState SampleType;

cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
	float3 lightDirection;
	float padding;
};

//////////////////////
////   TYPES
//////////////////////
struct PixelInputType
{
	float4 position : SV_POSITION;
	float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float4 color : COLOR;
};

//////////////////////
////   Pixel Shader
/////////////////////
float4 TexturePixelShader(PixelInputType input) : SV_TARGET
{
	float4 textureColor;
	float3 lightDir;
	float lightIntensity;
	float4 color;

	// Sample the pixel color from the texture using the sampler at this texture coordinate location.
	//textureColor = shaderTexture.Sample(SampleType, input.tex);

	// Set the default output color to the ambient light value for all pixels.
	color = ambientColor;

	// Invert the light direction for calculations.
	lightDir = - lightDirection;

	// Calculate the amount of the light on this pixel.
	lightIntensity = saturate(dot(input.normal, lightDir));

	if(lightIntensity > 0.0f)
	{
		// Determine the final diffuse color based on the diffuse color and the amount of light intensity.
		color += (diffuseColor * lightIntensity);
	}

	// Saturate the final light color.
	color = saturate(color);

	// Multiply the texture pixel and the final diffuse color to get the final pixel color result.
	// EX 2: for seeing only the lighting effect.
	color = color;// * textureColor;
	input.color = color;
	return input.color;
}








/*/////////////
// GLOBALS //
/////////////
Texture2D shaderTexture;
SamplerState SampleType;


//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    //float4 position : SV_POSITION;
	//float4 color : COLOR;
	//float3 normal : NORMAL;
    //float2 tex : TEXCOORD;

	float4 position : SV_POSITION;
	float4 color : COLOR;
	float3 normal : NORMAL;
	float2 texcoord : TEXCOORD;
	float3 lightDirection:LIGHT;
	float3 viewDirection:VIEW;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 TexturePixelShader(PixelInputType input) : SV_TARGET
{
	//float4 textureColor;
    // Sample the pixel color from the texture using the sampler at this texture coordinate location.
    //float4 textureColor = shaderTexture.Sample(SampleType, input.color);// * input.tex; 
    //return textureColor;
	//return  input.color;//float4(0.1,0.1,0.1,1);// input.color; //float4(0.1,0.1,0.1,1);

	//float2 parallax=input.viewDirection.xy * normalMap.Sample( textureSampler, input.texcoord).a*bias;
	//float4 D=textureMap.Sample( textureSampler, input.texcoord +parallax);
	//float4 N=normalMap.Sample( textureSampler, input.texcoord +parallax)*2.0f-1.0f;	
	//return saturate(dot(N,input.lightDirection))*D+0.2F;
	return  input.color;
}*/




/*float4 PS( PS_IN input ) : SV_Target
{
	float2 parallax=input.viewDirection.xy * normalMap.Sample( textureSampler, input.texcoord).a*bias;
	float4 D=textureMap.Sample( textureSampler, input.texcoord +parallax);
	float4 N=normalMap.Sample( textureSampler, input.texcoord +parallax)*2.0f-1.0f;	
	return saturate(dot(N,input.lightDirection))*D+0.2F;
}*/
